name: Main Pipeline
on:
  push:
    branches:
      - 'main'
env:
#  src-dir: ./src/code/ApiDestinationPOC
  cdk-dir: ./cdk
  coverage-threshold: 0
  cdk_action: deploy
  aws_secret: ${{ secrets.AWS_SECRET}}
  aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID}}
  aws_region: ap-southeast-2
  target_environment: dev
  aspnet_environment: Development
  run_number: ${{ github.run_number}}

concurrency: main-${{ github.ref}}
jobs:
  dotnetBuild:
    name: Build and Test
    runs-on: ubuntu-latest
    environment: dev
    timeout-minutes: 20
    steps:
      - name: Checkout action
        uses: actions/checkout@v3
        with:
          persist-credentials: false

#      - name: Setup dotnet
#        uses: actions/setup-dotnet@v3
#        with:
#          dotnet-version: '6.x'
#
#      - name: Install dependancies
#        run: dotnet restore ${{env.src-dir}}
#
#      - name: Build solution
#        run: dotnet build ${{env.src-dir}} --configuration Release --no-restore
#
#      - name: Install dotnet report generator tool
#        run: dotnet tool install --global dotnet-reportgenerator-globaltool
#
#      - name: Run unit tests
#        run: dotnet test ${{env.src-dir}} --filter FullyQualifiedName~Tests --configuration Release --verbosity quiet --collect:"XPlat Code Coverage" --results-directory ./coverage /p:CollectCoverage=true
#
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.aws_access_key_id }}
          aws-secret-access-key: ${{ env.aws_secret }}
          aws-region: ${{ env.aws_region }}

      - name: install npm
        run: 'sudo apt update -y && sudo apt install nodejs npm -y'

      - name: Install AWS CDK and dependencies
        env:
          CDK_DIR: ${{ env.cdk-dir }}
        run: |
          sudo npm install -g aws-cdk
          cd $CDK_DIR
          sudo npm install

      - name: CDK Synth
        run: cdk synth
        working-directory: ${{ env.cdk-dir }}

      - name: CDK Deploy
        run: cdk deploy --require-approval never
        working-directory: ${{ env.cdk-dir }}
